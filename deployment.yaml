apiVersion: v1
kind: ServiceAccount
metadata:
  name: health-checker-sa
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-pods
  namespace: default
subjects:
- kind: ServiceAccount
  name: health-checker-sa
  namespace: default
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: health-checker
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: health-checker
  template:
    metadata:
      labels:
        app: health-checker
    spec:
      serviceAccountName: health-checker-sa
      initContainers:
      - name: init-permissions
        image: busybox
        command: ['sh', '-c', 'cp /config/service-script.sh /tmp/service-script.sh && cp /config/kubectl-script.sh /tmp/kubectl-script.sh && chmod +x /tmp/service-script.sh /tmp/kubectl-script.sh']
        volumeMounts:
        - name: config-volume
          mountPath: /config
        - name: script-volume
          mountPath: /tmp
      containers:
      - name: nginx
        image: nginx:latest
        volumeMounts:
        - name: html-volume
          mountPath: /usr/share/nginx/html
        - name: config-volume
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
        ports:
        - containerPort: 80
      - name: checker
        image: curlimages/curl:latest
        command: ['sh', '-c', '/tmp/service-script.sh']
        volumeMounts:
        - name: script-volume
          mountPath: /tmp
        - name: html-volume
          mountPath: /usr/share/nginx/html
      - name: kubectl
        image: bitnami/kubectl:latest
        command: ['sh', '-c', '/tmp/kubectl-script.sh']
        volumeMounts:
        - name: script-volume
          mountPath: /tmp
        - name: html-volume
          mountPath: /usr/share/nginx/html
      volumes:
      - name: config-volume
        configMap:
          name: script-config-map
      - name: script-volume
        emptyDir: {}
      - name: html-volume
        emptyDir: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: script-config-map
  namespace: default
data:
  service-script.sh: |
    #!/bin/sh
    services_output="/usr/share/nginx/html/services-status"

    check_service() {
      url=$1
      status_code=$(curl -o /dev/null -w "%{http_code}" -s "$url")
      if [ "$status_code" -eq 200 ]; then
        echo "<span style='color:green'>Success: $url returned $status_code</span>" >> $services_output
      else
        echo "<span style='color:red'>Failure: $url returned $status_code</span>" >> $services_output
      fi
    }

    while true; do
      echo "Checking services at $(date)" > $services_output
      check_service "http://10.111.230.254"  # app1
      check_service "http://10.111.100.205"  # app2
      check_service "http://10.103.170.168"  # testapp1
      check_service "http://10.103.54.64"    # testapp2
      sleep 5
    done
  kubectl-script.sh: |
    #!/bin/sh
    pods_output="/usr/share/nginx/html/pods-status"

    check_pods() {
      kubectl get pods -n default | awk '{ if($3=="Running") print "<span style=\"color:green\">" $0 "</span>"; else print "<span style=\"color:red\">" $0 "</span>"; }' >> $pods_output
    }

    while true; do
      echo "Checking pods at $(date)" >> $pods_output
      echo "" > $pods_output
      check_pods
      sleep 5
    done
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Namespace Status</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 0;
                background-color: #f4f4f4;
            }
            .container {
                width: 80%;
                margin: 0 auto;
                padding: 20px;
            }
            h1 {
                text-align: center;
                color: #333;
            }
            .status-section {
                background-color: #fff;
                padding: 20px;
                margin-bottom: 20px;
                border-radius: 8px;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            }
            h2 {
                color: blue;
            }
            pre {
                background-color: #eee;
                padding: 10px;
                border-radius: 4px;
                overflow-x: auto;
                max-height: 200px; /* Adjust height as needed */
                overflow-y: auto;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>Namespace Status</h1>
            <div class="status-section">
                <h2>Pods</h2>
                <pre id="pods-status"></pre>
            </div>
            <div class="status-section">
                <h2>Services</h2>
                <pre id="services-status"></pre>
            </div>
        </div>
        <script>
            async function fetchStatus() {
                const podsResponse = await fetch('/pods-status');
                const podsText = await podsResponse.text();
                document.getElementById('pods-status').innerHTML = podsText;

                const servicesResponse = await fetch('/services-status');
                const servicesText = await servicesResponse.text();
                document.getElementById('services-status').innerHTML = servicesText;
            }

            setInterval(fetchStatus, 5000);
            fetchStatus();
        </script>
    </body>
    </html>
---
apiVersion: v1
kind: Service
metadata:
  name: health-checker-service
  namespace: default
spec:
  selector:
    app: health-checker
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: health-checker-ingress
  namespace: default
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
  - host: example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: health-checker-service
            port:
              number: 80
